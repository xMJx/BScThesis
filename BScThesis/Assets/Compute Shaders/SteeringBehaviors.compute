#pragma kernel CSMain

float DeltaTime;
float2 ThreatPosition;

float2 boidPos;
float2 boidVel;

int BoidCount;
int NeighborCount;
float MaxBoidSpeed;
float ThreatRange;
float NeighborhoodRange;

float FleeWeight;
float SeparationWeight;
float AlignmentWeight;
float CohesionWeight;

int NeighborTags[360];

struct BoidData
{
    float2 pos;
    float2 vel;
};

RWStructuredBuffer<BoidData> BoidDataBuffer;

float2 Seek(float2 targetPosition)
{
    float2 desiredVelocity = normalize(boidPos - targetPosition) * MaxBoidSpeed;
    return desiredVelocity - boidVel;
}

float2 Flee(float2 threatPosition)
{
    float2 toThreat = boidPos - threatPosition;
    if (length(toThreat) < ThreatRange)
    {
        float2 desiredVelocity = normalize(toThreat) * MaxBoidSpeed;
        return desiredVelocity - boidVel;
    }
    else
    {
        return float2(0, 0);
    }
}

void FindNeighbors(uint3 id)
{
    //for (int i = 0; i < 100; i++)
    //{
    //    NeighborTags[i] = 0;
    //}

    NeighborCount = 0;
    
    for (int i = 0; i < BoidCount; i++)
    {
        if (i != id.x)
        {
            if (length(BoidDataBuffer[i].pos - boidPos) <= NeighborhoodRange)
            {
                NeighborTags[NeighborCount] = i;
                NeighborCount++;    // incrementation of NeighborCount within a double block may confuse the compiler (seems like it does)
            }                  
        }
    }
}

float2 Separation()
{
    float2 separationForce = { 0, 0 };

    for (int i = 0; i < NeighborCount; i++)
    {
        float2 toAgent = boidPos - BoidDataBuffer[NeighborTags[i]].pos;
        separationForce += normalize(toAgent) / length(toAgent);
    }
    return separationForce;
}

float2 Alignment()
{
    float2 averageHeading = { 0, 0 };
    
    for (int i = 0; i < NeighborCount; i++)
    {
        averageHeading += normalize(BoidDataBuffer[NeighborTags[i]].vel);
    }

    if (NeighborCount > 0)
    {
        averageHeading /= NeighborCount;
        averageHeading -= normalize(boidVel);
    }
    return averageHeading;
}

float2 Cohesion()
{
    float2 centerOfMass = { 0, 0 };
    float2 cohesionForce = { 0, 0 };
            
    for (int i = 0; i < NeighborCount; i++)
    {
        centerOfMass += BoidDataBuffer[NeighborTags[i]].pos;
    }

    if (NeighborCount > 0)
    {
        centerOfMass /= NeighborCount;
        cohesionForce = Seek(centerOfMass);
        return normalize(cohesionForce);
    }
    return cohesionForce;
}

float2 Calculate()
{
    float2 steeringForce = { 0, 0 };

    //steeringForce += FleeWeight * Flee(ThreatPosition);
    //steeringForce += SeparationWeight * Separation();
    //steeringForce += AlignmentWeight * Alignment();
    steeringForce += CohesionWeight * Cohesion();

    return steeringForce;
}

void UpdateVelocity(uint3 id)
{
    BoidDataBuffer[id.x].vel += Calculate() * DeltaTime;
    //BoidDataBuffer[id.x].vel = clamp(BoidDataBuffer[id.x].vel, float2(-MaxBoidSpeed, -MaxBoidSpeed), float2(MaxBoidSpeed, MaxBoidSpeed));
}

void Move(uint3 id)
{
    BoidDataBuffer[id.x].pos += BoidDataBuffer[id.x].vel * DeltaTime;
    //BoidDataBuffer[id.x].pos = BoidDataBuffer[(id.x + 1) % 8].pos;
}

[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    boidPos = BoidDataBuffer[id.x].pos;
    boidVel = BoidDataBuffer[id.x].vel;
    FindNeighbors(id);
    UpdateVelocity(id);
    Move(id);

}