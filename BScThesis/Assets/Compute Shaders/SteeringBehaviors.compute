#pragma kernel CSMain

float DeltaTime;
float RandomValueX;
float RandomValueY;
float2 ThreatPosition;

float MaxBoidSpeed;
float ThreatRange;

float FleeWeight;

const static float PI = 3.14159265359;

struct BoidData
{
    float2 pos;
    float2 vel;
};

RWStructuredBuffer<BoidData> BoidDataBuffer;

float2 Flee(uint3 id, float2 threatPosition)
{
    float2 toThreat = BoidDataBuffer[id.x].pos - threatPosition;
    if (length(toThreat) < ThreatRange)
    {
        float2 desiredVelocity = normalize(toThreat) * MaxBoidSpeed;
        return desiredVelocity - BoidDataBuffer[id.x].vel;
    }
    else
        return float2(0, 0);
}

float2 Calculate(uint3 id)
{
    float2 steeringForce = { 0, 0 };
    steeringForce += FleeWeight * Flee(id, ThreatPosition);

    return steeringForce;
}

void UpdateVelocity(uint3 id)
{
    BoidDataBuffer[id.x].vel += Calculate(id) * DeltaTime;
    BoidDataBuffer[id.x].vel = clamp(BoidDataBuffer[id.x].vel, float2(-MaxBoidSpeed, -MaxBoidSpeed), float2(MaxBoidSpeed, MaxBoidSpeed));
}

void Move(uint3 id)
{
    BoidDataBuffer[id.x].pos += BoidDataBuffer[id.x].vel * DeltaTime;
}

[numthreads(1024,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // find neighbours
    UpdateVelocity(id);
    Move(id);
}